import streamlit as st
from supabase import create_client, Client
import uuid

# Initialize Supabase client
supabase: Client = create_client('https://.supabase.co', 
                                 'key')

# Dummy user credentials for testing
dummy_user = {
    'email': 'testuser@example.com',
    'password': 'testpassword'
}

def auth_interface():
    with st.sidebar:
        st.title("Authentication")

        # Registration form
        st.subheader("Register")
        reg_email = st.text_input("Email", key="reg_email")
        reg_password = st.text_input("Password", type="password", key="reg_password")
        if st.button("Register"):
            response = supabase.auth.sign_up({
                'email': reg_email,
                'password': reg_password
            })
            st.write("Register response:", response)
            if 'error' in response:
                st.error(f"Registration failed: {response['error']['message']}")
            else:
                st.success("Registered successfully! Please login.")

        # Login form
        st.subheader("Login")
        login_email = st.text_input("Email", key="login_email")
        login_password = st.text_input("Password", type="password", key="login_password")
        if st.button("Login"):
            if login_email == dummy_user['email'] and login_password == dummy_user['password']:
                st.session_state['user'] = {'email': login_email, 'id': str(uuid.uuid4())}
                st.session_state['login_status'] = True
                st.success(f"Welcome {login_email}!")
            else:
                response = supabase.auth.sign_in({
                    'email': login_email,
                    'password': login_password
                })
                st.write("Login response:", response)
                if 'error' in response:
                    st.error(f"Login failed: {response['error']['message']}")
                else:
                    st.session_state['user'] = response['user']
                    st.session_state['login_status'] = True
                    st.success(f"Welcome {response['user']['email']}!")
            st.experimental_rerun()

def add_task():
    task = st.text_input("Enter a new task", key="new_task")
    if st.button("Add Task"):
        response = supabase.table('tasks').insert({
            "user_id": st.session_state['user']['id'], 
            "task": task
        }).execute()
        st.write("Add task response:", response)
        if 'error' in response:
            st.error(f"Failed to add task: {response['error']['message']}")
        else:
            st.success("Task added successfully!")
            st.experimental_rerun()

def view_tasks():
    response = supabase.table('tasks').select("*").eq("user_id", st.session_state['user']['id']).execute()
    st.write("View tasks response:", response)
    if 'error' in response:
        st.error(f"Failed to fetch tasks: {response['error']['message']}")
    else:
        tasks = response.data
        for task in tasks:
            with st.container():
                st.write(task['task'])
                if st.button("Done", key=task['id']):
                    delete_task(task['id'])

def delete_task(task_id):
    response = supabase.table('tasks').delete().eq('id', task_id).execute()
    st.write("Delete task response:", response)
    if 'error' in response:
        st.error("Failed to delete task!")
    else:
        st.success("Task deleted successfully!")
        st.experimental_rerun()

def main():
    if 'login_status' not in st.session_state or not st.session_state.get('login_status'):
        auth_interface()
    else:
        st.sidebar.success(f"Logged in as {st.session_state['user']['email']}")
        add_task()
        view_tasks()
        if st.sidebar.button("Logout"):
            try:
                supabase.auth.sign_out()
                st.session_state.clear()
                st.experimental_rerun()
            except Exception as e:
                st.error(f"An unexpected error occurred: {str(e)}")

if __name__ == "__main__":
    main()

