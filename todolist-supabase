import streamlit as st
from supabase import create_client, Client

# Initialize Supabase client
supabase: Client = create_client('https://saolyadhqyoolkoqjkoy.supabase.co', 
                                 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNhb2x5YWRocXlvb2xrb3Fqa295Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjEwNjc2MjEsImV4cCI6MjAzNjY0MzYyMX0.LufpTqEsE3top89h1xOss6ESYLUQd9ADM-hBpqEavqU')

def auth_interface():
    with st.sidebar:
        st.title("Authentication")

        # Registration form
        st.subheader("Register")
        reg_email = st.text_input("Email", key="reg_email")
        reg_password = st.text_input("Password", type="password", key="reg_password")
        if st.button("Register"):
            try:
                user, error = supabase.auth.sign_up({'email': reg_email, 'password': reg_password})
                if error:
                    if "rate limit" in error.message.lower():
                        st.error("Too many registration attempts. Please try again later.")
                    else:
                        st.error(f"Registration failed: {error.message}")
                else:
                    st.success("Registered successfully! Please login.")
            except Exception as e:
                st.error(f"An unexpected error occurred: {str(e)}")

        # Login form
        st.subheader("Login")
        login_email = st.text_input("Email", key="login_email")
        login_password = st.text_input("Password", type="password", key="login_password")
        if st.button("Login"):
            try:
                user, error = supabase.auth.sign_in({'email': login_email, 'password': login_password})
                if error:
                    st.error(f"Login failed: {error.message}")
                else:
                    st.session_state['user'] = user
                    st.session_state['login_status'] = True
                    st.success(f"Welcome {user['email']}!")
            except Exception as e:
                st.error(f"An unexpected error occurred: {str(e)}")

def add_task():
    task = st.text_input("Enter a new task", key="new_task")
    if st.button("Add Task"):
        response = supabase.table('tasks').insert({
            "user_id": st.session_state['user']['id'], 
            "task": task
        }).execute()
        if response.error:
            st.error(f"Failed to add task: {response.error.message}")
        else:
            st.success("Task added successfully!")

def view_tasks():
    response = supabase.table('tasks').select("*").eq("user_id", st.session_state['user']['id']).execute()
    if response.error:
        st.error(f"Failed to fetch tasks: {response.error.message}")
    else:
        tasks = response.data
        for task in tasks:
            with st.container():
                st.write(task['task'])
                if st.button("Done", key=task['id']):
                    delete_task(task['id'])

def delete_task(task_id):
    response = supabase.table('tasks').delete().eq('id', task_id).execute()
    if response.error:
        st.error("Failed to delete task!")
    else:
        st.success("Task deleted successfully!")
        st.experimental_rerun()

def main():
    if 'login_status' not in st.session_state or not st.session_state.get('login_status'):
        auth_interface()
    else:
        st.sidebar.success(f"Logged in as {st.session_state['user']['email']}")
        add_task()
        view_tasks()
        if st.sidebar.button("Logout"):
            supabase.auth.sign_out()
            st.session_state.clear()
            st.experimental_rerun()

if __name__ == "__main__":
    main()
